 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package filltheblankspython;
import java.awt.Color;
import java.awt.Component;
import java.awt.Panel;
import java.awt.Point;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;



/**
 *
 * @author Joshua Mulcock
 */
public class Main extends javax.swing.JDialog {
private static Data data; //edit this static
private ArrayList<Word> code;
private static ArrayList<Word> screenCode;
private ArrayList<Word> keyboard;
private static WordSwitcher switcher;
private int taskNum, taskSize;
private static ArrayList<Word> screenKB;
static int spaceX, spaceY; 
   
/**
     * Creates new form Main
     */
    public Main(java.awt.Frame parent, boolean modal) { 
        super(parent, modal);
        initComponents();
        //parent.setExtendedState(JFrame.MAXIMIZED_BOTH); 
        switcher = new WordSwitcher();
        data = new Data(switcher);
        spaceX = lblSpace.getWidth();    //spacing to be used to place next Jlabel once the JLbael is the size of the text in code.
        spaceY = lblSpace.getHeight() + 10;
        taskSize = data.getTasksSize();
        taskNum = 0;
        newTask(taskNum);
        
    }

    private void setLblNum(int taskNum, int taskSize){ //not working
        int size = taskSize;
        int num = taskNum + 1;
        lblNum.setText(num +"/"+ size);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTask = new java.awt.Panel();
        lblTask = new javax.swing.JLabel();
        panelCode = new javax.swing.JPanel();
        panelKeyboard = new javax.swing.JPanel();
        panelFunction = new javax.swing.JPanel();
        btnRemove = new javax.swing.JButton();
        btnCheck = new javax.swing.JButton();
        lblNum = new javax.swing.JLabel();
        lblSpace = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1200, 620));

        panelTask.setBackground(new java.awt.Color(204, 204, 255));
        panelTask.setMaximumSize(new java.awt.Dimension(420, 600));
        panelTask.setMinimumSize(new java.awt.Dimension(420, 600));
        panelTask.setPreferredSize(new java.awt.Dimension(420, 600));

        lblTask.setFont(new java.awt.Font("Times New Roman", 2, 24)); // NOI18N
        lblTask.setText("Task:");
        lblTask.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblTask.setSize(panelTask.getWidth(), panelTask.getHeight());
        lblTask.setMaximumSize(lblTask.getSize());

        javax.swing.GroupLayout panelTaskLayout = new javax.swing.GroupLayout(panelTask);
        panelTask.setLayout(panelTaskLayout);
        panelTaskLayout.setHorizontalGroup(
            panelTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTask, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelTaskLayout.setVerticalGroup(
            panelTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTaskLayout.createSequentialGroup()
                .addComponent(lblTask, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(189, 189, 189))
        );

        panelCode.setBackground(new java.awt.Color(204, 204, 255));

        javax.swing.GroupLayout panelCodeLayout = new javax.swing.GroupLayout(panelCode);
        panelCode.setLayout(panelCodeLayout);
        panelCodeLayout.setHorizontalGroup(
            panelCodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1036, Short.MAX_VALUE)
        );
        panelCodeLayout.setVerticalGroup(
            panelCodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panelKeyboard.setBackground(new java.awt.Color(204, 204, 255));

        javax.swing.GroupLayout panelKeyboardLayout = new javax.swing.GroupLayout(panelKeyboard);
        panelKeyboard.setLayout(panelKeyboardLayout);
        panelKeyboardLayout.setHorizontalGroup(
            panelKeyboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelKeyboardLayout.setVerticalGroup(
            panelKeyboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panelFunction.setBackground(new java.awt.Color(204, 204, 255));

        btnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/alphaCross.png"))); // NOI18N
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnCheck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/alphaTick.png"))); // NOI18N
        btnCheck.setName("btnCheck"); // NOI18N
        btnCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckActionPerformed(evt);
            }
        });

        lblNum.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        lblNum.setText("? / ?");

        lblSpace.setFont(new java.awt.Font("Monospaced", 0, 30)); // NOI18N
        lblSpace.setText(" ");

        javax.swing.GroupLayout panelFunctionLayout = new javax.swing.GroupLayout(panelFunction);
        panelFunction.setLayout(panelFunctionLayout);
        panelFunctionLayout.setHorizontalGroup(
            panelFunctionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFunctionLayout.createSequentialGroup()
                .addComponent(btnCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRemove))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFunctionLayout.createSequentialGroup()
                .addContainerGap(194, Short.MAX_VALUE)
                .addComponent(lblNum)
                .addGap(105, 105, 105)
                .addComponent(lblSpace)
                .addGap(70, 70, 70))
        );
        panelFunctionLayout.setVerticalGroup(
            panelFunctionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFunctionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFunctionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSpace)
                    .addComponent(lblNum))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addGroup(panelFunctionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRemove, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnCheck, javax.swing.GroupLayout.Alignment.TRAILING)))
        );

        btnRemove.setToolTipText("Refresh Screen");
        btnCheck.setToolTipText("Check Answers");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelTask, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelFunction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelKeyboard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelTask, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelKeyboard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelFunction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckActionPerformed
//        final ArrayList<Word> code = data.getCode(taskNum);
        boolean finished = true;
        boolean correct = true;
        //ArrayList<JLabel> list = new ArrayList<>();
        Word word1;
        Word word2;
        for(Word word : screenCode){
            if (word.isBlank() == true){
                finished = false;
            }
        } 
        
        if (finished == false) {
            JOptionPane.showMessageDialog(null, "Not all boxes filled!");
            correct = false;
        }
        
        else {
            for (int i = 0; i < code.size(); i++){
                word1 = screenCode.get(i);
                word2 = code.get(i);
                
                if (!(word1.getWord().equals(word2.getWord()))){ //reversers the output so it checks if false;
                    correct = false;
                    word1.getLabel().setIcon(new javax.swing.ImageIcon(getClass().getResource("Images/alphaWrong.png")));
                    word1.setIcon(true);
                }
                
                else if ((word1.getWord().equals(word2.getWord())) && word1.isBlank() == false){
                    if(word1.getLabel().isFocusable()){             //issue with this
                        word1.getLabel().setIcon(new javax.swing.ImageIcon(getClass().getResource("Images/alphaRight.png")));
                        word1.setIcon(true);
                    }
                }
                
            }
            //shows whats wrong or correct then hides the images again.
            
        
        if (correct == true){
                    System.out.println("Correct");
                    JOptionPane.showMessageDialog(null, "Correct");
                    removeComponents(panelCode);
                    removeComponents(panelKeyboard);
                    taskNum +=1;
                    newTask(taskNum);     //goes to next task
        }
        
        else {
            System.out.println("NOT CORRECT");
            JOptionPane.showMessageDialog(null, "Incorrect");
            }
        
        try{
              TimeUnit.SECONDS.sleep(2);
              for(Word w : screenCode){
                if(w.hasIcon()){
                   w.getLabel().setIcon(null);
                   w.setIcon(false);
                   w.getLabel().revalidate();
                }
            }
            } catch (InterruptedException ex){
                System.out.println("Sleep failed");
            }
        
            newCode(screenCode);                //redraws the cod
        
        }
    }//GEN-LAST:event_btnCheckActionPerformed

    
    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        removeComponents(panelCode);
        removeComponents(panelKeyboard);
        newTask(taskNum);
    }//GEN-LAST:event_btnRemoveActionPerformed

    private static void removeComponents(JPanel p){
        Component[] panel = p.getComponents();
        for(Component comp : panel){
            p.remove(comp);
        }
       p.revalidate();
       p.repaint();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Main dialog = new Main(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    private void newTask(int level) {
        //code = new ArrayList<>();
        //keyboard = new ArrayList<>();
        setLblNum(taskNum, taskSize);
        keyboard = data.getKeyboard(level); //shallow copy
        screenKB = new ArrayList<Word>(keyboard);
        int n = 10 - keyboard.size();
        screenKB.addAll(getRandomKeyboard(n));
        
        code = data.getCode(level);
        screenCode = new ArrayList<Word>(code); //contains the information that will change.
        
        String task = data.getTask(level);
        lblTask.setText("<html><p>"+task+"</p></html>");    //html used for automatic wrapping
        setup(screenCode, screenKB);
        
    }
    
    private static void setup(ArrayList<Word> c, ArrayList<Word> kb){
        newCode(c);
        newKeyboard(kb);  
    }
    
    private static void lblFlash(ArrayList<Word> list){
        //makes a set of Jlabels flash to direct the player to where they should click.
        for(int i=0; i < 5; i++){
            for(Word w : list){
                w.getLabel().setBackground(Color.yellow);
            }
            try {
                TimeUnit.MILLISECONDS.sleep(350);
            } catch (InterruptedException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            for(Word w : list){
                w.getLabel().setBackground(null);
            }
        }
    }
    
    public static void focusKB(){
        lblFlash(screenKB);
    }
    
    public static void focusCode(){
        lblFlash(screenCode);
    }
    
    
    public static void refresh(ArrayList<Word> c, ArrayList<Word> kb){
        //This take is used to be able to update the UI when switch has takn place.
        screenKB = new ArrayList<>(switcher.getKeyboard());
        screenCode = new ArrayList<>(switcher.getCode());
        removeComponents(panelCode);
        removeComponents(panelKeyboard);
        setup(c, kb);
    }
    
    private static void newCode(ArrayList<Word> c){
        switcher.setCodeList(c);
        int xCoord = 20;
        int yCoord = 0;
        int num = 0;
        for(Word word : c) {
            
            if (word.getWord().equals("@newline@")){
                yCoord+=spaceY;
                xCoord = 20;
                word.newLabel(0, 0, null);            
                word.getLabel().setVisible(false);
            }
            else {
                word.setList("code");
                String name = "code" + num;
                num++;  
                boolean kb = false;         //determines if keyboard to have those special options in the new label. Moved to constructor of word.
                word.newLabel(xCoord, yCoord, name);
                word.setLabelName(name);
                panelCode.add(word.getLabel());
                xCoord += word.getLabel().getWidth() + spaceX; // this makes sure there is a space inbetween 
            }
        }
    }
    
private static void newKeyboard(ArrayList<Word> k){
        switcher.setKeyboardList(k);
        int xCoord = 20;
        int yCoord = 0;
        int num=0;
        int gap = (panelKeyboard.getWidth() - 60) / k.size();
        System.out.println("K:"+k.size());
        //checker(k); //delete this
        for (Word word : k){
            word.setList("kb"); //this is telling that the word belongs to KB.
            //System.out.println(word.getWord() + ":" + word);
            String name = "key"+num;
            word.newLabel(xCoord, yCoord, name);
            word.setLabelName(name);
            panelKeyboard.add(word.getLabel());
            xCoord+=gap; //equal width apart for number of objects but including random notatin 
            num++;
        }
        
    }

    private ArrayList<Word> getRandomKeyboard(int n){
        ArrayList<Word> list = new ArrayList<>();
        ArrayList<String> funcList = data.getFunctionList();
        Random rnd = new Random();
        int size = funcList.size();
        String s;
        for (int i = 0; i < n; i++){
            s = funcList.get(rnd.nextInt(size));
            System.out.println(s);
            Word w = new Word(s, false, switcher, true, data.getDictionary());
            list.add(w);
        }
        return list;
    }

        static void checker(ArrayList<Word> k){
            if(k.get(0) == data.getParser().getTempWord()){
                System.out.println("Same location");
            }
            else{
                System.out.println("Different Location");
            }
            
            if(k.get(0).equals(data.getParser().getTempWord())){
                System.out.println("Same object");
            }
            else {
                System.out.println("Different Object");
            }
            
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheck;
    private javax.swing.JButton btnRemove;
    private javax.swing.JLabel lblNum;
    private javax.swing.JLabel lblSpace;
    private javax.swing.JLabel lblTask;
    private static javax.swing.JPanel panelCode;
    private javax.swing.JPanel panelFunction;
    private static javax.swing.JPanel panelKeyboard;
    private java.awt.Panel panelTask;
    // End of variables declaration//GEN-END:variables
}
